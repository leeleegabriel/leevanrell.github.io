<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://leevanrell.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://leevanrell.github.io/" rel="alternate" type="text/html" /><updated>2020-07-18T18:04:19-05:00</updated><id>https://leevanrell.github.io/feed.xml</id><title type="html">Lee Vanrell</title><subtitle>Software Engineer attempts to write a blog.  Focused on programming, 3d printing, arduino's, sdr, and more. </subtitle><author><name>lee vanrell</name></author><entry><title type="html">Reverse Engineering Convolutional Codes</title><link href="https://leevanrell.github.io/informationtheory/2020/07/18/Reverse-Engineering-Convolutional-Codes/" rel="alternate" type="text/html" title="Reverse Engineering Convolutional Codes" /><published>2020-07-18T17:03:36-05:00</published><updated>2020-07-18T17:03:36-05:00</updated><id>https://leevanrell.github.io/informationtheory/2020/07/18/Reverse-Engineering-Convolutional-Codes</id><content type="html" xml:base="https://leevanrell.github.io/informationtheory/2020/07/18/Reverse-Engineering-Convolutional-Codes/">&lt;p&gt;I’ve recently been reading through Daniel Estevez’s blog because I wanted to learn more about reverse engineering signals. If your unfamiliar, Daniel Estevez is the code owner/maintainer/big boi of &lt;a href=&quot;https://github.com/daniestevez/gr-satellites&quot;&gt;gr-satellites&lt;/a&gt;, a very popular OOT module for gnuradio that supports decoding 80+ satellites.&lt;/p&gt;

&lt;p&gt;This eventually led me to find &lt;a href=&quot;https://github.com/BatchDrake/cccrack&quot;&gt;cccrack&lt;/a&gt; mentioned in a post where Daniel was trying to reverse engineer the convolutional encoder for the DSCS-III beacon.&lt;/p&gt;

&lt;p&gt;The tool itself is fairly limited in its capability however, I hope as it ages it develops to be more practical to use. Currently, it reads in symbols from a file and guesses its codes using the &lt;a href=&quot;https://www.researchgate.net/publication/224093438_Dual_Code_Method_for_Blind_Identification_of_Convolutional_Encoder_for_Cognitive_Radio_Receiver_Design&quot;&gt; Marazin-Gautier-Burel&lt;/a&gt;. I wish I could go into more depth on this algorithm but I’m very lacking in the linear algebra department but it definitely looks dope &lt;strong&gt;af&lt;/strong&gt; from my ignorant standpoint. Let’s try it out and see how it works.&lt;/p&gt;

&lt;p&gt;First let’s make a encoder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/re_convolutional_codes/encoder.png&quot; alt=&quot;Encoder diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a diagram of a simple 1/2 convolutional encoder I stole from the internet. It has a code rate of 1/2 meaning that it takes in one bit and outputs two bits. The center boxes are a single bit registers that store a single bit and the circle with pluses represent xor operations. Here’s the python code that implement’s the encoder.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bits.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the sake of simplicity and my cpu, we’re going to keep the ‘symbols’ in a binary constellation however, cccrack does support complex modulation schemes up to 6 bits per symbol.&lt;/p&gt;

&lt;p&gt;Now we build cccrack and see if it can figure out our encoder:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autoreconf &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
./configure
make
src/cccrack bits.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and this is cccrack’s output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/re_convolutional_codes/cccrack_output.png&quot; alt=&quot;cccrack output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here not only can see we that it accurately estimated the code rate, but it accurately describes the structure of the encoder.
I’m unsure of what the H[1] means but the G[1] represents the physical connections of the encoder for each output. Essentially it says the first output bit is xor’d with the input, the 2nd, and 3rd register, while the second output bit is xor’d with the input, 1st register, and 3rd register. A picture’s worth a thousand words so here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/re_convolutional_codes/cccrack_diagram.png&quot; alt=&quot;cccrack diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I think this tool has a lot of potential and can be more useful than alternatives like gr-baz’s autofec block if its given more dev time. The developer &lt;a href=&quot;https://batchdrake.github.io/sc2019/&quot;&gt;mentions&lt;/a&gt; that he would like to add this algorithm to SigDigger using the soft decision version algorithm, which I think would greatly enhance its usefulness in practical applications&lt;/p&gt;

&lt;p&gt;If you’re completely unaware of what convolutional encoding is or why its needed, tough.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">I’ve recently been reading through Daniel Estevez’s blog because I wanted to learn more about reverse engineering signals. If your unfamiliar, Daniel Estevez is the code owner/maintainer/big boi of gr-satellites, a very popular OOT module for gnuradio that supports decoding 80+ satellites.</summary></entry><entry><title type="html">Surviving in an offline environment</title><link href="https://leevanrell.github.io/debian/apt/2020/06/06/surviving-in-an-offline-environment/" rel="alternate" type="text/html" title="Surviving in an offline environment" /><published>2020-06-06T18:03:36-05:00</published><updated>2020-06-06T18:03:36-05:00</updated><id>https://leevanrell.github.io/debian/apt/2020/06/06/surviving-in-an-offline-environment</id><content type="html" xml:base="https://leevanrell.github.io/debian/apt/2020/06/06/surviving-in-an-offline-environment/">&lt;p&gt;Have you ever been so fucked that you had to work on a box that didn’t have internet? Then this post is for you!&lt;/p&gt;

&lt;p&gt;The simplest solution is to setup a squeeky clean vm and use apt to get the .debs you need. Here’s an example to install wine offline:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt clean &lt;span class=&quot;c&quot;&gt;# just in case&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--download-only&lt;/span&gt; wine &lt;span class=&quot;c&quot;&gt;# or -d&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;zip &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; wine.zip /var/cache/apt/archives/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then on your offline box run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip wine.zip
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This only works if the vm/online box doesn’t have any of required packages installed. If you run apt -d with wine already installed then apt won’t download any of the required .debs since it already sees wine installed on the system.&lt;/p&gt;

&lt;p&gt;So what if you want to use a online dev environments with packages already installed to supply .deb packages to a offline computer?&lt;/p&gt;

&lt;p&gt;Theres apt-offline which you can use on any system, debian or not for download your required apt packages. The problem here is that we have to install apt-offline on both the offline system and the online system. In addition to that debian 10 does not have apt-offline in it’s native repos yet so we have to install it from source.&lt;/p&gt;

&lt;p&gt;For the online system run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt clean
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git python3-pip python-magic
git clone https://github.com/rickysarraf/apt-offline.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;apt-offline/
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;soappy
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;soappy
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 download &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt; soappy
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note we download all the required files from pip because we’ll be using them later on the offline system. Now we have the online system setup, lets make a bundle to install on the offline system.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;zip &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; offline-install.zip /var/cache/apt/archives/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.deb apt-offline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then take that over to the offline system and run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip offline-install.zip
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;apt-offline/soappy
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we should be set for creating a sig file for the offline system:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-offline &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;wine-offline.sig &lt;span class=&quot;nt&quot;&gt;--install-packages&lt;/span&gt; wine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This generates a file to tell the online system what the offline system already has installed on it. It can use it to diff and figure out what it needs. Take the wine-offline.sig to the online system and run&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-offline get wine-offline.sig &lt;span class=&quot;nt&quot;&gt;--bundle&lt;/span&gt; wine-install.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then take the .zip it generates to the offline machine and run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-offline &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wine-install.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wasn’t that fun?&lt;/p&gt;

&lt;p&gt;The benefit of using apt-offline is allows us the flexibility of not having to use the same OS and version for the online box and allows us to install packages (on the online box) with out risking missing dependencies for the offline box.&lt;/p&gt;

&lt;p&gt;If you are working on a system that uses yum the alternative is similar to the first process where you will need a vm with the same OS/verion and run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;yum-plugin-downloadonly
	yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--downloadonly&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--downloaddir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;directory&amp;gt; &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again this methodology is limited but it works. Sort of.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">Have you ever been so fucked that you had to work on a box that didn’t have internet? Then this post is for you!</summary></entry><entry><title type="html">Just another Pihole guide</title><link href="https://leevanrell.github.io/raspberrypi/pihole/2020/02/10/Just-another-pihole-guide/" rel="alternate" type="text/html" title="Just another Pihole guide" /><published>2020-02-10T19:31:11-06:00</published><updated>2020-02-10T19:31:11-06:00</updated><id>https://leevanrell.github.io/raspberrypi/pihole/2020/02/10/Just-another-pihole-guide</id><content type="html" xml:base="https://leevanrell.github.io/raspberrypi/pihole/2020/02/10/Just-another-pihole-guide/">&lt;p&gt;Here’s a quick how-to for setting up a Pihole server at home.&lt;/p&gt;

&lt;p&gt;First, you need to setup a VM/raspberrypi to host the Pihole. I decided to just run Pihole off a VM on my ESXi server I already had.&lt;/p&gt;

&lt;p&gt;The VM I’m using is a Ubuntu 18.04 LTS Server image. To get it to work with Pihole we’ll have to make the IP static so it doesn’t up and change on us.&lt;/p&gt;

&lt;p&gt;Since Ubuntu 17(?), Ubuntu uses netplan for configuring it’s ethernet interfaces. So let’s go to its config file at /etc/netplan/50-cloud.yaml (alternatively create a file called 01-netcfg.yaml and remove the default files). Edit the text so it looks like this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;network:
  version: 2
  renderer: networkd
  ethernets: 
    ens160:
      dhcp4: no
      addresses:
        - 192.168.1.100/24
      gateway4: 192.168.1.1
      nameservers:
        addresses: [192.168.1.1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Be wary that your ethernet interface name/ip subnet may vary, mine is ens160. Also, set your address to whatever you like, but I’ll be using 192.168.1.100. Once you’re done, run&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo netplan apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now to install Pihole. Simply run:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ curl -sSL https://install.pi-hole.net | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will prompt you for a few options like what external DNS you’d like to use, OpenDNS, Quad9, and DNSWatch are all fine. Once it’s finished it will show a screen with a randomly generated password to access the Pihole admin menu.&lt;/p&gt;

&lt;p&gt;Next, login at http://192.168.1.100/admin/ using the password provided. Now you have your very own DNS server.&lt;/p&gt;

&lt;p&gt;There’s a few quality of life improvements I recommend:&lt;/p&gt;

&lt;p&gt;First, lets add some more blocklists. Click Tools &amp;gt; blocklists. Then copy and paste this into the text block:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
https://mirror1.malwaredomains.com/files/justdomains
http://sysctl.org/cameleon/hosts
https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
https://hosts-file.net/ad_servers.txt
https://raw.githubusercontent.com/nicholasb2101/PiHole/master/Blocklists/Primary%20Blocklist.txt
https://raw.githubusercontent.com/nicholasb2101/PiHole/master/Blocklists/Secondary%20Blocklist.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Click save and update, it may take a minute.&lt;/p&gt;

&lt;p&gt;To setup your router to use your Pihole you’ll need to set it’s default DNS to use 192.168.1.100. Once that is done you can set all device’s DNS to your router at 192.168.1.1 and it’ll route to the Pi. If your using, OpenWRT you can do this by selecting Network &amp;gt; Interfaces &amp;gt; Edit Lan; Then enter 6,192.168.1.100 into the DHCP-Option field.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pihole/dns_dhcp.png&quot; alt=&quot;Config Pic1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To force devices that are hardcoded to use external DNS you can configure your router to redirect all DNS requests to your Pihole. If you end up setting up a OpenWRT router, log in to it, then click Network &amp;gt; Firewall &amp;gt; Custom rules and drop these commands into the text box. If don’t have OpenWRT but can ssh into your router, then ssh into your router and enter these commands.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -t nat -A PREROUTING -s 192.168.1.1 -j ACCEPT 
iptables -t nat -A PREROUTING -d 192.168.1.100 -j ACCEPT
iptables -t nat -A OUTPUT -p udp --dport 53 -j DNAT --to 192.168.1.100
iptables -t nat -A OUTPUT -p tcp --dport 53 -j DNAT --to 192.168.1.100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pihole/dns_redirect.png&quot; alt=&quot;Config Pic2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s all the configurations I’ve made to my Pihole so far, and I’m immensely satisfied.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">Here’s a quick how-to for setting up a Pihole server at home.</summary></entry><entry><title type="html">How to configure your IoT GPS modules</title><link href="https://leevanrell.github.io/iot/adafruit/2020/02/09/How-to-configure-your-IoT-gps-module/" rel="alternate" type="text/html" title="How to configure your IoT GPS modules" /><published>2020-02-09T14:02:45-06:00</published><updated>2020-02-09T14:02:45-06:00</updated><id>https://leevanrell.github.io/iot/adafruit/2020/02/09/How-to-configure-your-IoT-gps-module</id><content type="html" xml:base="https://leevanrell.github.io/iot/adafruit/2020/02/09/How-to-configure-your-IoT-gps-module/">&lt;p&gt;A few years ago, I had a project that required me to collect GPS along with the db of cell towers, so I could triangulate their location. I went down a rabbit hole trying to figure out how to configure the GPS module to output data in the format I wanted; I wasted more time than I’m willing to admit to, so I decided that this might help someone avoid raging at a piece of equipment that couldn’t possibly fight back.&lt;/p&gt;

&lt;p&gt;The GPS module I used is the &lt;a href=&quot;https://www.adafruit.com/product/746&quot;&gt;“Adafruit Ultimate GPS Breakout”&lt;/a&gt;. This is a pretty decent module for the price although you can probably find knockoffs on aliexpress if you’re cheap. 
When you first plug in the GPS module you’ll notice that it prints a &lt;strong&gt;ton&lt;/strong&gt; of additional data you may or may not need. To limit what it printed to what I wanted I had to do some research on the GPS’s PMTK API to figure out what I needed to do. You can find the PMTK commands for configuring it &lt;a href=&quot;https://cdn-shop.adafruit.com/datasheets/PMTK_A11.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Based on that spreadsheet I’ve put together this little example script:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serial&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;GPS_TTY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/dev/ttyUSB0'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'configuring GPS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;#start tty session
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GPS_Serial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPS_TTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baudrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARITY_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
    	&lt;span class=&quot;n&quot;&gt;stopbits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STOPBITS_ONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EIGHTBITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#configures GPS to only output GPGGA Sentences
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GPS_Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b'$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#configures how often GPS prints
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GPS_Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b'$PMTK220,100*2F&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#set the baudrate of the GPS
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GPS_Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b'$PMTK251,115200*1F&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPS_Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerialException&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lost connection to GPS unit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPS_Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the first thing we do is open a tty with the GPS unit; its default baud rate is at 9600, but we’ll be changing that in a moment;&lt;/p&gt;

&lt;p&gt;Now we can start sending commands to our GPS unit. We send the unit three separate commands, each with their own definite purpose.&lt;/p&gt;

&lt;p&gt;The first command is PMTK314 (PMTK_API_SET_NMEA_OUTPUT), it configures the GPS to send only the sentences in the format we care about. We tell it to write out only our GPS fix data and nothing else by setting everything to 0, except for NMEA_SEN_GGA field. As an aside, you can set the value to more than one if you wanted to have the message print every so often instead of every update period.&lt;/p&gt;

&lt;p&gt;The next command is PMTK220 (PMTK_SET_NMEA_UPDATERATE). This command configures the update period of the GPS module. The data field is how often you want it to update in milliseconds, it can be between 100-10000. Here we set it to be 100ms&lt;/p&gt;

&lt;p&gt;The last command is PMTK251 (PMTK_SET_NMEA_BAUDRATE). Because we changed the update rate, we also need to change the baud rate so the tty can keep up. The data field here is just the baud rates, it is capable of 4800, 9600, 14400, 19200, 38400, 57600, 115200. We’ll turn it up all the way 115200 since we like to live fast and loose; and also we need it to be that fast to keep up with a 100ms tx rate.&lt;/p&gt;

&lt;p&gt;The keener among you has probably noticed that most of these messages are followed by two digits of hex and “&lt;CR&gt;&lt;LF&gt;&quot;. This is a checksum value that has to be calculated for the preceding message, if you want to customize your own GPS/messages you can use this resource [here](http://www.hhhh.org/wiml/proj/NMEAxor.html) to create your checksums.&lt;/LF&gt;&lt;/CR&gt;&lt;/p&gt;

&lt;p&gt;To parse the GPGGA sentences, you can use &lt;a href=&quot;https://github.com/Knio/pyNMEA2&quot;&gt;pyNMEA2&lt;/a&gt;. Or if you’re wanting to stay in stdlib you can use regex to parse everything out. Here’s an example with pyNMEA2 since I’m lazy.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serial&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pynmea2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pynmea2&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParseError&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPS_TTY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/dev/ttyUSB0'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPS_Serial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPS_TTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baudrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
        &lt;span class=&quot;n&quot;&gt;parity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARITY_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopbits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STOPBITS_ONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
        &lt;span class=&quot;n&quot;&gt;bytesize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EIGHTBITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# wait 100ms
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;GPS_Output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPS_Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ascii'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;\
        &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pynmea2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;Lat: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Lon: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerialException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#handle error somehow
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;UnicodeDecodeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#handle error somehow
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#handle error somehow
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPS_Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For a robust implementation be sure to sanitize/authenticate the GPS’s output before your try to parse, the GPS/Serial connection can fuck up and spit out bad data almost regularly, which will throw exceptions and crash your script. Or if you’re me, just use a massive try-catch to keep it chugging.&lt;/p&gt;

&lt;p&gt;And as a final note, the next time you open a tty with the GPS you’ll need to set the baud rate up to 115200. And if you use a coin cell battery with it you won’t have to reconfigure every time it boots.&lt;/p&gt;

&lt;p&gt;Finis.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">A few years ago, I had a project that required me to collect GPS along with the db of cell towers, so I could triangulate their location. I went down a rabbit hole trying to figure out how to configure the GPS module to output data in the format I wanted; I wasted more time than I’m willing to admit to, so I decided that this might help someone avoid raging at a piece of equipment that couldn’t possibly fight back.</summary></entry><entry><title type="html">Intro to Software Defined Radio: Part I</title><link href="https://leevanrell.github.io/sdr/gnuradio/2020/02/03/Intro-to-Software-Defined-Radio/" rel="alternate" type="text/html" title="Intro to Software Defined Radio: Part I" /><published>2020-02-03T19:30:24-06:00</published><updated>2020-02-03T19:30:24-06:00</updated><id>https://leevanrell.github.io/sdr/gnuradio/2020/02/03/Intro-to-Software-Defined-Radio</id><content type="html" xml:base="https://leevanrell.github.io/sdr/gnuradio/2020/02/03/Intro-to-Software-Defined-Radio/">&lt;p&gt;For the past 4 years or so I’ve tinkered with Software Defined Radios (SDR), but until recently my knowledge of them was fairly limited. So, today I hope to impart some of my wisdom onto you.&lt;/p&gt;

&lt;p&gt;First, a &lt;strong&gt;very&lt;/strong&gt; brief 101 on what Software Defined Radios are and how they work.&lt;/p&gt;

&lt;p&gt;SDRs are everywhere, they can be found in phones, IoT devices, Cars, etc.. The thing that makes them so desirable is the flexibility they can offer manufacturers and users. In a world with constantly evolving wireless standards and protocols, it’s useful to be able to update your software for free instead of having to buy new compatible hardware. There are a whole host of benefits, but that’s just off the top of my head.&lt;/p&gt;

&lt;p&gt;But how does it work? Heres a diagram I mercilessly stole from Wikipedia:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sdr/wiki.png&quot; alt=&quot;SDR Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The logic of the radio is offloaded to software where a programmer can design and implement the radio using their favorite programming language (python/c++/matlab/etc.). The software uses an API supported by the FPGA inside of the SDR, where the FPGA acts as a middle-man between the user and the RF frontend. There are a lot more physics and components that exist to manage the internal signals to make things work but that’s the gist of it from a programmer’s perspective.&lt;/p&gt;

&lt;p&gt;It’s hard to talk about SDR without mentioning gnuradio.
For the most part, gnuradio is the defacto framework for developing your own SDR Tools/Transmitters/Receivers/Whatever.&lt;/p&gt;

&lt;p&gt;If you want to get started using gnuradio, let me clear somethings up. Don’t install gnuradio from the default repos. They’re outdated and who wouldn’t want the &lt;strong&gt;curved lines&lt;/strong&gt; available in GRv3.8. Use gnuradio’s PPA instead:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/binb/bash
sudo add-apt-repository ppa:gnuradio/gnuradio-releases
sudo apt-get update
sudo apt install gnuradio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a side note, for out-of-tree modules, install from source, don’t use PyBOMBs. No one uses that shit. I’ve been to the conference, trust me. 
To install a OOT module, its almost always the same:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash

git clone &amp;lt;module&amp;gt;
cd &amp;lt;module&amp;gt;
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few OOT modules I recommend are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;gr-baz : this a RF reverse engineering module. slightly outdated and hard to use but very cool blocks.&lt;/li&gt;
  &lt;li&gt;gr-satellites : this is a collection of receiver/decoder/demod blocks for literally dozens of satellites&lt;/li&gt;
  &lt;li&gt;gr-adsb : because who wouldn’t want to monitor planes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many, many others but this is just what I remember now. Be wary of some blocks (In or Out of tree) because some of them just don’t work properly; be prepared to hack shit together, then feel free to make a pull request whenever you fix their shit. Be aware that some of these modules may not yet be ported to the newest version of gnuradio.&lt;/p&gt;

&lt;p&gt;For those who want to be badass and program a block from the ground up. Here’s my recommendation, use C++. I know you want to use python; everyone wants to use python. Just trust me. What little &lt;a href=&quot;https://www.gnuradio.org/doc/doxygen/&quot;&gt;documentation&lt;/a&gt; exists is almost entirely on C++. And the python API isn’t fully featured, meaning that everything that is implemented in C++ may not be accessible/have an equivalent in python. Just gonna have to grit your teeth and push on.&lt;/p&gt;

&lt;p&gt;For those in the market for a SDR, there are two major factors: to transmit or not to transmit? and budget.&lt;/p&gt;

&lt;p&gt;For those who want to transmit, the Hackrf is a good budget choice, the only problem is that it’s only half-duplex, so you can only send OR receive. I would also recommend the LimeSDR, which is full-duplex, but keep in mind it is in high demand and hard to find in stock. Also, keep within all laws and regulations of the FCC. Don’t transmit in bands your not allowed to. Ham licenses are easy to acquire so please get one.&lt;/p&gt;

&lt;p&gt;For those who just want to receive, really any RTL-SDR/DVB-Tuner will work. They’re are all the same for the most part. They all contain Realtek chips, R820T or RTL2832U. Some of the more expensive RTL-SDRs use better components for greater stability/frequency range; but someone new to SDR, the $20 DVB-T tuner will suit you well.&lt;/p&gt;

&lt;p&gt;For those who want Duplex capability or higher bandwidth, Ettus makes excellent hardware for a home RF lab if you gothave the cash.&lt;/p&gt;

&lt;p&gt;When it comes to SDRs and price, the sky is the limit to what you want to spend. And there is no shortage of options to pick from. For the most part, it is a usually trade-off for features and cost. There are many SDRs I haven’t listed, but these are just what I have experience with.&lt;/p&gt;

&lt;p&gt;Till next time.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">For the past 4 years or so I’ve tinkered with Software Defined Radios (SDR), but until recently my knowledge of them was fairly limited. So, today I hope to impart some of my wisdom onto you.</summary></entry><entry><title type="html">How to Setup a Homelab: Making a Parts List</title><link href="https://leevanrell.github.io/homelab/esxi/2020/02/02/How-to-setup-a-homelab/" rel="alternate" type="text/html" title="How to Setup a Homelab: Making a Parts List" /><published>2020-02-02T17:12:38-06:00</published><updated>2020-02-02T17:12:38-06:00</updated><id>https://leevanrell.github.io/homelab/esxi/2020/02/02/How-to-setup-a-homelab</id><content type="html" xml:base="https://leevanrell.github.io/homelab/esxi/2020/02/02/How-to-setup-a-homelab/">&lt;p&gt;A few years ago, I built my first homelab server; I remember it being a bit of a daunting task and decided it might be helpful to share a few insights.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;https://www.reddit.com/r/homelabs/&quot;&gt;r/homelabs&lt;/a&gt; as a resource to assemble the parts list. Along with &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Intel_Xeon_microprocessors&quot;&gt;wikipedia&lt;/a&gt; and intel’s &lt;a href=&quot;https://ark.intel.com/content/www/us/en/ark.html#@PanelLabel595&quot;&gt;spec site&lt;/a&gt; for choosing the CPUs.&lt;/p&gt;

&lt;p&gt;The initial build was this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Intel Xeon E5-2660 v2 2.20GHz x2
 ARCTIC Alpine 20 Plus CO - 130 Watt Low Noise CPU Cooler x2
 Supermicro X9DRi-LN4F+ Dual LGA2011 1.20 Support E5-2600 v2 24x Slot DDR3 
 32GB 4X8GB DDR3 1333MHz ECC REG MEMORY x2 (64 gb total)
 Crucial BX300 120GB 
 WD Red 4tb 5400rpm HDD x4
 Phanteks Enthoo Pro series ATX Full Tower Case
 EVGA SuperNOVA 750 G2, 80+ GOLD 750W,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the years came some regrets, most derived from the build itself.&lt;/p&gt;

&lt;p&gt;Now the processors I picked are definitely good performers; however, having two beefy Xeons running 24/7 has its downsides. This is a system that will bump your electricity bill up a notch. Now, me being young and foolish at the time never really sat down and did the math. I will break it down for those reading at home.&lt;/p&gt;

&lt;p&gt;The average cost of power where I live is about 0.11/kWh (about the national average). Using this &lt;a href=&quot;https://forums.servethehome.com/index.php?threads/xeon-26xx-v2-power-draw.22720/&quot;&gt;site&lt;/a&gt; for estimating power consumption, we can estimate my power consumption to be around 120w-130w idle. For the most part, it never reaches a very high load unless I’m doing something very compute-intensive which is rare. So let’s just call it on average 140Wh to round things out.&lt;/p&gt;

&lt;p&gt;So that means every day we consume 3.360 kWh a day. Or 100.8 kWh a month, adding about ~$11 a month to my electricity bill. Since inception that would be about $264 dollars of electricity, I would’ve paid for running this system in my apartment.&lt;/p&gt;

&lt;p&gt;As a plus, It is a ‘future-proofed’ system that I don’t foresee upgrading the CPUs anytime in the future. Unless something breaks. But I would recommend a more sane spec with just a single Xeon for the newbie who wants to get into the world of homelabing.&lt;/p&gt;

&lt;p&gt;Staying within the realm of power, the EVGA PSU was a good choice. It’s an age-old rule of thumb to never skimp on the power supply. It’s important to get a good 80plus power supply to save money. Nowadays an 80plus PSUs are much cheaper and accessible. I’m not 100% sure if it’s true, but supposedly using a PSU that far exceeds what your system can consume will help preserve the life of the PSU since it’ll be far less under load than less capable PSUs. It makes &lt;a href=&quot;https://www.ee.co.za/article/thermal-stress-capacitors-failure-prevention.html&quot;&gt;sense&lt;/a&gt; to me, but I’d take it with a grain of salt since the things most likely to fail in a PSU will still fail eventually no matter how much they’ve been used.&lt;/p&gt;

&lt;p&gt;Outside of that most choices for hardware are relatively easy. Once you’ve picked your CPU everything else falls in place. At first, I was apprehensive toward using used hardware, but for Processors, RAM, and even HDDs you can hardly tell. The bonus for used Xeons is there a huge over-saturation of them on the market. If you okay with not having the latest and greatest, you can acquire 2-3 generations old Xeons for less than $200. I believe I paid $250 for my two Xeons.&lt;/p&gt;

&lt;p&gt;I think Supermicro is still a good choice for motherboards. I recommend an enterprise motherboard instead of the consumer/extremist grade ones that come out from time to time. For motherboards, the more bells and whistles you have the more likely it is to fail. That’s why most server motherboards are stripped down to the bare essentials.&lt;/p&gt;

&lt;p&gt;As for the HyperVisor, I used the free version of ESXi, its relatively easy to set up and maintain. The webclient it provides is always useful (despite a few bugs here and there). I’ve also been thinking of adding a GPU for Machine learning and it seems like ESXi is still the best solution for GPU passthrough, so that’s a plus.&lt;/p&gt;

&lt;p&gt;Other options though are KVM, Proxmox, and Hyper-V. The ESXi free version has some limits on it (like no vCenter, 2 physical CPUs max, 8 vCPU/VM max), however, I feel like it isn’t a big deal for most non-commercial/enterprise users. Realistically, none of these options is a bad choice, it’s down to what you prefer.&lt;/p&gt;

&lt;p&gt;As a note, if you chose to use a dual-socket motherboard and a tower instead of a rack solution, be wary of the dimensions; it was a tight squeeze getting my motherboard in its case.&lt;/p&gt;

&lt;p&gt;That’s it for now.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">A few years ago, I built my first homelab server; I remember it being a bit of a daunting task and decided it might be helpful to share a few insights.</summary></entry><entry><title type="html">MagicMirror Build</title><link href="https://leevanrell.github.io/python/raspberrypi/2020/01/30/MagicMirror-build/" rel="alternate" type="text/html" title="MagicMirror Build" /><published>2020-01-30T19:10:12-06:00</published><updated>2020-01-30T19:10:12-06:00</updated><id>https://leevanrell.github.io/python/raspberrypi/2020/01/30/MagicMirror-build</id><content type="html" xml:base="https://leevanrell.github.io/python/raspberrypi/2020/01/30/MagicMirror-build/">&lt;p&gt;Here’s a little project I’ve worked on a few weeks ago. It’s a semi-intelligent magic mirror I put together. It was relatively cheap to put together since I got the monitor for free and already had a pi lying around.&lt;/p&gt;

&lt;p&gt;For the frame, I used this &lt;a href=&quot;https://amzn.to/2uCL8Rk&quot;&gt;frame&lt;/a&gt; (though when I bought it was for $100, not $150 so you may want to look elsewhere).&lt;/p&gt;

&lt;p&gt;The first thing to do is to make sure that the monitor works; it saves time and heartbreak. Then remove the bezel from the monitor and be careful of any ribbon cables connected to the monitor and the bezel.
For my monitor, the display was divided into two parts physically, the power supply/input logic board, and the display itself. So to keep them together I applied a hefty amount of duck tape. Because who has power tools?&lt;/p&gt;

&lt;p&gt;This is the final product somewhat:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/magicmirror/front.jpg&quot; alt=&quot;Lowkey just a selfie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/magicmirror/back.jpg&quot; alt=&quot;Back&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can’t even tell its held entirely together by duck tape!&lt;/p&gt;

&lt;p&gt;I’ll explain the wizardry that is connected to the pi in a second.
To set up the magic mirror, the process is pretty automated see &lt;a href=&quot;https://github.com/sdetweil/MagicMirror_scripts&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For customizations, I like to install &lt;a href=&quot;https://github.com/nigel-daniels/MMM-3Day-Forecast&quot;&gt;3Day forecast&lt;/a&gt;. That’s pretty much it, since, I’ve failed repeatedly to get carousel setup. I do recommend tweaking the CSS to correct for the screen not taking up the entire mirror’s real-estate.&lt;/p&gt;

&lt;p&gt;Now here’s where things get interesting. I’ve configured my Mirror to turn off at around 9 pm and back on at 6a m automatically. Here’s how:&lt;/p&gt;

&lt;p&gt;First, for hardware, you’ll need a &lt;a href=&quot;https://amzn.to/2RWC15Z&quot;&gt;photoresistor&lt;/a&gt; and a &lt;a href=&quot;https://amzn.to/37AHBRP&quot;&gt;relay&lt;/a&gt;. For tools, you’ll need a soldering iron and power of will.
I’ve wired a photoresistor to the pi that sends a low signal whenever it detects light above a certain threshold and vice versa when it doesn’t. The threshold is can be adjusted with a screw in the blue housing. I’ve used this in conjunction with a relay that has the control side wired to the pi and the operating side connected to a ribbon cable that was connected to the control board for the on/off buttons. Wiring is relatively simple, I’ve used a miniature breadboard to distribute power to the rest of the components, but isn’t necessary.&lt;/p&gt;

&lt;p&gt;I first figured out which pins on the control board need to be shorted to turn the display on &amp;amp; off.
I initially planned to solder to the board, but then realized that I can scrape the plastic off of the side of the ribbon cable connecting to the board and solder directly to that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/magicmirror/solder.jpg&quot; alt=&quot;sketchy solder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s sketchy but it works.&lt;/p&gt;

&lt;p&gt;Then I plugged the soldered wires into the operating side of the relay.
Here’s the code for actually toggling the pi on/off&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/env python

import RPi.GPIO as GPIO
import sys
from time import sleep

GPIO.setmode(GPIO.BCM)

toggle = sys.argv[1]

GPIO.setup(23, GPIO.OUT)
GPIO.setup(24, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

#GPIO is high when disp is off and GPIO low when off, inverting because that seems more logical
light_state = not GPIO.input(24) 

#will flip relay if told to turn on display and display is off or 
#if told to turn off the display and the display is on
if (toggle == &quot;turnon&quot; and light_state == GPIO.LOW) or (toggle == &quot;turnoff&quot; and light_state == GPIO.HIGH):
	GPIO.output(23, GPIO.HIGH)
	sleep(0.5)
	GPIO.output(23, GPIO.LOW)
	sleep(1.5) # wait for display to turn off
GPIO.cleanup()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I know. Its hot garbage. But it’s my garbage.&lt;/p&gt;

&lt;p&gt;You can drop this script in your home directory. Make it executable with chmod.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ chmod +x script.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then run crontab to create a cron job entry.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are my entries:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0	5	*	*	*	/home/pi/script.py turnon
0	21	*	*	*	/home/pi/script.py turnoff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s cool about this solution is that it’s easily hackable enough that you can make a webserver to toggle it on/off aswell. I’ve made a quick example of a flask server controlling the mirror:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#/usr/bin/python3

from flask import Flask,render_template
from time import sleep
import RPi.GPIO as GPIO
import subprocess

GPIO.setmode(GPIO.BCM)
GPIO.setup(23, GPIO.OUT)
GPIO.setup(24, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

# configuration
DEBUG = True

# instantiate the app
app = Flask(__name__)
app.config.from_object(__name__)

@app.route('/', methods=['GET'])
def index():
	light_state = not GPIO.input(24) 
	if light_state == 0:
		return render_template('index.html', color=&quot;black&quot;, state=&quot;Turn on&quot;)
	else:
		return render_template('index.html', color=&quot;white&quot;, state=&quot;Turn off&quot;)

@app.route('/test', methods=[&quot;GET&quot;])
def button():
	light_state = not GPIO.input(24) 
	if light_state == 1:
		toggle()
		return render_template('index.html', color=&quot;black&quot;, state=&quot;Turn on&quot;)
	else:
		toggle()
		return render_template('index.html', color=&quot;white&quot;, state=&quot;Turn off&quot;)

def toggle():
	GPIO.output(23, GPIO.HIGH)
	sleep(0.5)
	GPIO.output(23, GPIO.LOW)
	sleep(1.5) # wait for display to turn off

if __name__ == '__main__':
	mirror_status = 0
	app.run(host='0.0.0.0')
	GPIO.cleanup()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are other things you can do like have it toggle on whenever it senses motion or lack thereof 
The rest of the code is &lt;a href=&quot;https://github.com/leevanrell/mirror-controller.git&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finis.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">Here’s a little project I’ve worked on a few weeks ago. It’s a semi-intelligent magic mirror I put together. It was relatively cheap to put together since I got the monitor for free and already had a pi lying around.</summary></entry><entry><title type="html">Turning GPT-2 into Alex Jones</title><link href="https://leevanrell.github.io/python/gpt-2/2020/01/24/Turning-GPT-2-into-Alex-Jones/" rel="alternate" type="text/html" title="Turning GPT-2 into Alex Jones" /><published>2020-01-24T20:02:32-06:00</published><updated>2020-01-24T20:02:32-06:00</updated><id>https://leevanrell.github.io/python/gpt-2/2020/01/24/Turning-GPT-2-into-Alex-Jones</id><content type="html" xml:base="https://leevanrell.github.io/python/gpt-2/2020/01/24/Turning-GPT-2-into-Alex-Jones/">&lt;p&gt;This post is me riding the coattails of the GPT-2 hype train. 
Now for those that don’t know, GPT-2 is a machine learning model that is very effective at text generation. It can maintain context over a long period of text making it more ‘human’ than previous algorithms.&lt;/p&gt;

&lt;p&gt;For those that are interested read &lt;a href=&quot;https://towardsdatascience.com/transformers-141e32e69591&quot;&gt;this&lt;/a&gt; article on transformers
and of course openai’s &lt;a href=&quot;https://openai.com/blog/better-language-models/&quot;&gt;site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the memes. To get GPT-2 talking like Alex Jones, we need text and a lot of it. Unfortunately, Alex Jones was largely purged from social media in 2019 so we’ll have to get creative. First, &lt;a href=&quot;https://en.wikiquote.org/wiki/Alex_Jones&quot;&gt;wikiquotes&lt;/a&gt; was a decent starting point. I used python w/ requests and bs4 to scrape the data (your smart, do it yourself).&lt;/p&gt;

&lt;p&gt;I’ve looked for transcripts of the Alex Jones show to no avail. But what I did find was Alex Jones’s archived &lt;a href=&quot;https://webrecorder.io/ola_norsk/twitter---alex-jones/list/twitter-profiles/b1/20180818015205/https://twitter.com/realalexjones&quot;&gt;twitter&lt;/a&gt; on webrecorder.io. Not sure what kind of wizardry those guys are running for this web app, but I couldn’t get the HTML of his twitter feed for the life of me. So instead I just selected all text and wrote it to a file. Genius. There was some manual formatting I did to group them into tweets and then clean up the actual contents, but once that’s done it was somewhat useable for my purposes.&lt;/p&gt;

&lt;p&gt;Now that we’ve collected around 900 lines of the good stuff we can train a model. Here’s the code I used (stolen from some medium post, probably):&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gpt_2_simple&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpt2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;124M&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# model is saved into current directory under /models/124M/
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;models&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gpt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;download_gpt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   

&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;./src/alex_jones.txt&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_tf_sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gpt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finetune&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			  &lt;span class=&quot;n&quot;&gt;run_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'run2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			  &lt;span class=&quot;n&quot;&gt;save_every&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			  &lt;span class=&quot;n&quot;&gt;print_every&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			  &lt;span class=&quot;n&quot;&gt;sample_every&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			  &lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0001&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gpt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate_to_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve let this train in my homelab for a few hours while I slept, and checked back when I thought it was ready.&lt;/p&gt;

&lt;p&gt;Here are some of the results:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Organizer: Planned Parenthood Ships Guns To The US  View all other

Open book censorship represents a poison pill for the people and a soulless dollop of
propaganda for the corporate media. #FreeInfowars #1A

These people are the future. They're such zombies that you can  not only read the news,
but look at these people! They're so freaking fastidious they have time organs  in their 
knees that they can hardly walk! They have no awareness of what's going on  and go &quot;OOH 
O_O O_O&quot;O Oh my gosh! That's evil! The Alex Jones Show, &quot;HILLARY CLINTON IS A GOD DAMN 
DEMON&quot;, June 2016.

I'm like a gigantic pumpkinhead, sitting in a  park, and I'm thinking &quot;Man, this is gonna
be a really bad day.  It just so happens, is gonna be really bad. I'm thinking ABOUT 
WHATEVER  I'm thinking about today. Yeah, I'm thinking

A vocal minority of Trump hating registered voters has called off an election for fear of
repercussions from his supporters.     #Trump2020 #MAGA #1a #USA

Video: left wing extremists targeting DC political events with machetes this weekend  

The coordinated corporate attack on Infowars has exposed a deceptic by any measure, but
the silencing of the truth is even more apparent.

Now you need to find a way to stop the Chinese from harvesting our blood.

The Rise Of Alex Jones As A Fake News Crikey, Tune in M F 11am 3pm central at:   &amp;lt;&amp;lt; 
#RealNews #WednesdayWisdom #1a #ThursdayMotivation   #FreeInfowars

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are just a few of the hundreds of little gems GPT-2 spat out for us. There were a few artifacts that I didn’t like from the outputs; so in the alex_jones.txt, I went back and cleaned it up a bit more. The rest of the text files are relatively unmodified if you’d like to do the scrubbing yourself. Unlike GPT-2, all the code, output, and finetuning text I used can all be found &lt;a href=&quot;https://github.com/leevanrell/make-alex-great-again&quot;&gt;here&lt;/a&gt;. Have fun. And don’t let the globalists win.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">This post is me riding the coattails of the GPT-2 hype train. Now for those that don’t know, GPT-2 is a machine learning model that is very effective at text generation. It can maintain context over a long period of text making it more ‘human’ than previous algorithms.</summary></entry><entry><title type="html">Expanding your VMs in ESXi</title><link href="https://leevanrell.github.io/vm/esxi/2020/01/21/Expanding-your-VMs-in-ESXi/" rel="alternate" type="text/html" title="Expanding your VMs in ESXi" /><published>2020-01-21T18:10:00-06:00</published><updated>2020-01-21T18:10:00-06:00</updated><id>https://leevanrell.github.io/vm/esxi/2020/01/21/Expanding-your-VMs-in-ESXi</id><content type="html" xml:base="https://leevanrell.github.io/vm/esxi/2020/01/21/Expanding-your-VMs-in-ESXi/">&lt;p&gt;This was pesky enough that I thought it merited a small post. I recently ran out of media on my Ubuntu VM on my ESXi v6.5 homelab. And went on a small adventure trying to figure out what to slap in the terminal to get more space. So hopefully this might save someone else more time.&lt;/p&gt;

&lt;p&gt;First, go to the VM whose HDD you’d like to expand and click edit settings.
Then click the Hard disk option and enter your desired HDD size (make sure the VM is shut down for this).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/esxi_vm_hdd.png&quot; alt=&quot;ESXi Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then boot your VM and click the GUI option or ssh in. Make sure GParted is installed with:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo apt install gparted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Start GParted and click the /dev/sda1 partition then click the Resize/Move button. Drag the partition to the right to consume the unallocated partition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/esxi_vm_gparted.png&quot; alt=&quot;GParted Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Normally, this is all you’d have to do for a regular linux machine, however, it uses logical volumes that have to be extended as well.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo fdisk -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It should display something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/esxi_vm_cmd_1.png&quot; alt=&quot;fdisk output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second entry, ubuntu–vg-root, is the volume we’re concerned with. The name will vary from machine to machine but it should still something like name–vg-root at end. You can ignore the swap partition.&lt;/p&gt;

&lt;p&gt;Next run:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo lvresize /dev/mapper/ubuntu--vg-root -L +100g 
~ sudo resize2fs /dev/mapper/vg0-slash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Be sure to modify /dev/mapper/ubuntu–vg-root to match your fdisk -l output.
This extends your partition by 100g, insert however much you need. You can use 100%FREE instead of +100g and it should consume all available space; however, I couldn’t get it working for me.&lt;/p&gt;

&lt;p&gt;That’s it!&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">This was pesky enough that I thought it merited a small post. I recently ran out of media on my Ubuntu VM on my ESXi v6.5 homelab. And went on a small adventure trying to figure out what to slap in the terminal to get more space. So hopefully this might save someone else more time.</summary></entry><entry><title type="html">Capital Gains vs. Dividends vs. Critical Thought</title><link href="https://leevanrell.github.io/investing/2020/01/20/Capital-Gains-vs-Dividends-vs-Critical-Thought/" rel="alternate" type="text/html" title="Capital Gains vs. Dividends vs. Critical Thought" /><published>2020-01-20T19:50:12-06:00</published><updated>2020-01-20T19:50:12-06:00</updated><id>https://leevanrell.github.io/investing/2020/01/20/Capital-Gains-vs-Dividends-vs-Critical-Thought</id><content type="html" xml:base="https://leevanrell.github.io/investing/2020/01/20/Capital-Gains-vs-Dividends-vs-Critical-Thought/">&lt;p&gt;I’ve seen a recent trend on youtube where people post about the success of their dividend portfolio and the ‘power blue-chip dividend stocks’. These videos fucking annoy me.&lt;/p&gt;

&lt;p&gt;So let’s do a really quick analysis to compare a SPY (Capital Gains) and SPYD (Dividends) portfolio. We’ll use &lt;a href=&quot;https://www.portfoliovisualizer.com/backtest-portfolio&quot;&gt;portfoliovisualizer&lt;/a&gt; to make the backtest&lt;/p&gt;

&lt;p&gt;Here you can see each portfolio allocation:
&lt;img src=&quot;/assets/img/allocation_1.png&quot; alt=&quot;Asset Allocations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here are the resulting returns:
&lt;img src=&quot;/assets/img/stock_dividend_returns_1.png&quot; alt=&quot;Asset Returns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SPY portfolio outperforms by about $900 dollars. The SPY does have a worse drawdown, yet maintains a better overall Sharpe Ratio (I have no idea what that means but there you go). The 3rd mix is interesting. I created it by picking the top 5 dividend stocks recommended by &lt;a href=&quot;https://dividendstocks.cash/dividend-screener&quot;&gt;dividendstocks.cash&lt;/a&gt;. I also watched a few dividend videos online and saw that most youtubers echoed some of the same stocks. So it seems like the stocks are at least somewhat recommended by the dividend stock community. Given its performance, I can see why. But, this backtest is limited to Jan 2016-Dec 2019 because of SPYD so let’s cut it out and see if it outperforms given a longer timeline.&lt;/p&gt;

&lt;p&gt;Here are the resulting returns:
&lt;img src=&quot;/assets/img/stock_dividend_returns_2.png&quot; alt=&quot;Asset Returns&quot; /&gt;
&lt;img src=&quot;/assets/img/stock_dividend_returns_graph.png&quot; alt=&quot;Asset Returns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A much better final balance. If you go back farther and farther back the performance only gets better for the dividend portfolio; however, I’m lazy and you get the point.&lt;/p&gt;

&lt;p&gt;Though realistically this is a terrible backtest due to bias because I chose these stocks based on previous performance. So, let’s strike that out for now. Or if you want I can throw in an AMZN, GOOGL, FB portfolio together and see how they go toe to toe. Looks like I need a better point.&lt;/p&gt;

&lt;p&gt;So, what else is there? Taxes.&lt;/p&gt;

&lt;p&gt;Taxes get complicated very fast so let’s keep it simple. There are two different types of dividends in terms of taxes. Qualified dividends, basically a dividend paid by a US company, and Ordinary dividends. Ordinary dividends are taxed as ordinary income whereas Qualified dividend receives reduced tax rates depending on your reported income. Since Qualified dividends are better, let’s just focus on them for now.&lt;/p&gt;

&lt;p&gt;For the 10% and 12% tax brackets, you pay 0% in taxes for Qualified dividends.
For the 22%, 24%, 32%, and 35%, you pay a 15% tax rate.
For the 35% and 37% tax brackets, you make too much to care. If you noticed, that the 35% bracket appears twice, its because marriage complicates things.&lt;/p&gt;

&lt;p&gt;Now let’s look at regular Stocks or ‘Capital gains’ as the kids call them. Again, there are two types, long term, held for longer than a year, and short term, held for less than a year.&lt;/p&gt;

&lt;p&gt;For short term capital gains, it is taxed equal to your marginal tax rate.
For long term capital gains, the tax rates vary from 0%-20% based on your tax bracket&lt;/p&gt;

&lt;p&gt;For the 10% and 12% tax brackets, you pay 0 in taxes much like Qualified dividends.
For the 22%, 24%, 32%, and 35%, you pay a 15% tax rate.
For the 35% and 37% tax brackets, you make too much to care (okay its 20%).&lt;/p&gt;

&lt;p&gt;So, there is no benefit in terms of taxes to dividends or stocks as long as its a US company or if it’s held for longer than a year.&lt;/p&gt;

&lt;p&gt;So why are there a bunch of thots in my youtube feed, using these points like there’s some sort of magical stock market loophole out there? I guess they assume everyone’s too fucking stupid to do their homework.&lt;/p&gt;

&lt;p&gt;Realistically, anyone who can take advantage of the tax-free status of a dividend or stock should invest their money in an IRA and in a passively managed index with ultra-low fees.&lt;/p&gt;

&lt;p&gt;You won’t bring yourself out of poverty and into obscene wealth overnight. Dividends can’t magic out enough of an income for you to live off of easily. Stocks aren’t a cure-all. Listen to reason. Invest in you. Invest in the future. There are kernels of truth in their lies, but just be wary. Call me a hater, but just fuck off with the bullshit&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">I’ve seen a recent trend on youtube where people post about the success of their dividend portfolio and the ‘power blue-chip dividend stocks’. These videos fucking annoy me.</summary></entry></feed>