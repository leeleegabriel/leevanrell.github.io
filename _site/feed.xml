<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://leevanrell.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://leevanrell.github.io/" rel="alternate" type="text/html" /><updated>2020-02-04T19:20:25-06:00</updated><id>https://leevanrell.github.io/feed.xml</id><title type="html">Lee Vanrell</title><subtitle>Software Engineer attempts to write a blog.  Focused on programming, 3d printing, arduino's, sdr, and more. </subtitle><author><name>lee vanrell</name></author><entry><title type="html">Intro to Software Defined Radio: Part I</title><link href="https://leevanrell.github.io/sdr/gnuradio/2020/02/03/Intro-to-Software-Defined-Radio/" rel="alternate" type="text/html" title="Intro to Software Defined Radio: Part I" /><published>2020-02-03T19:30:24-06:00</published><updated>2020-02-03T19:30:24-06:00</updated><id>https://leevanrell.github.io/sdr/gnuradio/2020/02/03/Intro-to-Software-Defined-Radio</id><content type="html" xml:base="https://leevanrell.github.io/sdr/gnuradio/2020/02/03/Intro-to-Software-Defined-Radio/">&lt;p&gt;For the past 4 years or so I’ve tinkered with Software Defined Radios (SDR), but until recently my knowledge of them was fairly limited. So, I today I hope to impart some of my wisdom onto you.&lt;/p&gt;

&lt;p&gt;First, a &lt;strong&gt;very&lt;/strong&gt; brief 101 on what Software Define Radios are and how they work.&lt;/p&gt;

&lt;p&gt;SDRs are everywhere, they can be found in phones, IoT devices, Cars, etc.. The thing that makes them so desirable is the flexibility they can offer manufacturers and users. In a world with constantly evolving wireless standards and protocols, it’s useful to be able to update your software for free instead of having to buy new compatible hardware. There are a whole host of benefits, but that’s just off the top of my head.&lt;/p&gt;

&lt;p&gt;But how does it work? Heres a diagram I mercilessly stole from Wikipedia:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sdr/wiki.png&quot; alt=&quot;SDR Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The logic of the radio is offloaded to software where a programmer can design and implement the radio using their favorite programming language (python/c++/matlab/etc.). The software uses an API supported by the FPGA inside of the SDR, where the FPGA acts as a middle-man between the user and the RF frontend. There are a lot more physics and components that exists to manage the internal signals to make things work but that’s really the gist of it from a programmer’s perspective.&lt;/p&gt;

&lt;p&gt;It’s hard to talk about SDR without mentioning GNURadio.
For the most part, GNURadio is the defacto framework for developing your own SDR Tools/Transmitters/Receivers/Whatever.&lt;/p&gt;

&lt;p&gt;If you want to get started using GNURadio, let me clear somethings up. Don’t install gnuradio from the default repos. They’re outdated and who wouldn’t want the &lt;strong&gt;curved lines&lt;/strong&gt; available in GRv3.8. Use gnuradio’s PPA instead:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo add-apt-repository ppa:gnuradio/gnuradio-releases
~ sudo apt-get update
~ sudo apt install gnuradio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a side note, for out-of-tree modules, install from source, don’t use PyBOMBs. No one actually uses that shit. I’ve been to the conference, trust me.
To install a OOT module, its almost always the same:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo git clone &amp;lt;module&amp;gt;
~ cd &amp;lt;module&amp;gt;
~ mkdir build
~ cd build
~ cmake ..
~ make
~ sudo make install
~ sudo ldconfig 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few OOT modules I recommend are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;gr-baz : this a RF reverse engineering module. slightly outdated and hard to use but very cool blocks.&lt;/li&gt;
  &lt;li&gt;gr-satellites : this is a collection of receiver/decoder/demod blocks for literally dozens of satellites&lt;/li&gt;
  &lt;li&gt;gr-adsb : because who wouldn’t want to monitor planes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many, many others but this is just what I remember now. Be wary of some blocks (In or Out of tree) because some of them just don’t work properly; be prepared to hack shit together, then feel free to make a pull request whenever you fix their shit.&lt;/p&gt;

&lt;p&gt;For those who want to be badass and program a block from the ground up. Here’s my one recommendation, use C++. I know you want to use python; everyone wants to use python. Just trust me. What little &lt;a href=&quot;https://www.gnuradio.org/doc/doxygen/&quot;&gt;documentation&lt;/a&gt; exists is almost entirely on C++. And the python API isn’t fully featured, meaning that everything that is implemented in C++ may not be accessible/have an equivalent in python. Just gonna have to grit your teeth and push on.&lt;/p&gt;

&lt;p&gt;For those in the market for a SDR there are two major factors: to transmit or not to transmit? and budget.&lt;/p&gt;

&lt;p&gt;For those who want to transmit, the Hackrf is a good budget choice, the only problem is that it’s only half-duplex, so you can only send OR receive. I would also recommend the LimeSDR, which is full-duplex, but keep in mind it is in high demand and hard to find in stock. Also keep within all laws and regulations of the FCC. Don’t transmit in bands your not allowed to. Ham licenses are easy to acquire so please get one.&lt;/p&gt;

&lt;p&gt;For those who just want to receive, really any RTL-SDR/DVB-Tuner will work. They’re are all the same for the most part. They all contain Realtek chips, R820T or RTL2832U. Some of the more expensive RTL-SDRs and use better components for greater stability/precision, but for an entry-level SDR the $20 DVB-T tuner will suit you well.&lt;/p&gt;

&lt;p&gt;For those who want Duplex capability or higher bandwidth, Ettus makes excellent hardware for a home RF lab if you gothave the cash.&lt;/p&gt;

&lt;p&gt;When it comes to SDRs and price, the sky is the limit to what you want to spend. And there is no shortage of options to pick from. For the most part, its a usual trade-off for features and cost. There are many SDRs I haven’t listed, but these are just what I have experience with.&lt;/p&gt;

&lt;p&gt;Till next time.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">For the past 4 years or so I’ve tinkered with Software Defined Radios (SDR), but until recently my knowledge of them was fairly limited. So, I today I hope to impart some of my wisdom onto you.</summary></entry><entry><title type="html">How to Setup a Homelab: Making a Parts List</title><link href="https://leevanrell.github.io/homelab/esxi/2020/02/02/How-to-setup-a-homelab/" rel="alternate" type="text/html" title="How to Setup a Homelab: Making a Parts List" /><published>2020-02-02T17:12:38-06:00</published><updated>2020-02-02T17:12:38-06:00</updated><id>https://leevanrell.github.io/homelab/esxi/2020/02/02/How-to-setup-a-homelab</id><content type="html" xml:base="https://leevanrell.github.io/homelab/esxi/2020/02/02/How-to-setup-a-homelab/">&lt;p&gt;A few years ago, I built my first homelab server; I remember it being a bit of a daunting task and decided it might be helpful to share a few insights.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;https://www.reddit.com/r/homelabs/&quot;&gt;r/homelabs&lt;/a&gt; as a resource to assemble the parts list. Along with &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Intel_Xeon_microprocessors&quot;&gt;wikipedia&lt;/a&gt; and intel’s &lt;a href=&quot;https://ark.intel.com/content/www/us/en/ark.html#@PanelLabel595&quot;&gt;spec site&lt;/a&gt; for choosing the CPUs.&lt;/p&gt;

&lt;p&gt;The initial build was this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Intel Xeon E5-2660 v2 2.20GHz x2
 ARCTIC Alpine 20 Plus CO - 130 Watt Low Noise CPU Cooler x2
 Supermicro X9DRi-LN4F+ Dual LGA2011 1.20 Support E5-2600 v2 24x Slot DDR3 
 32GB 4X8GB DDR3 1333MHz ECC REG MEMORY x2 (64 gb total)
 Crucial BX300 120GB 
 WD Red 4tb 5400rpm HDD x4
 Phanteks Enthoo Pro series ATX Full Tower Case
 EVGA SuperNOVA 750 G2, 80+ GOLD 750W,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the years came some regrets, most derived from the build itself.&lt;/p&gt;

&lt;p&gt;Now the processors I picked are definitely good performers; however, having two beefy Xeons running 24/7 has it’s downsides. This is a system that will bump your electricity bill up a notch. Now, me being young and foolish at the time never really sat down and did the math. Me in my wisdom now will break it down for those reading at home.&lt;/p&gt;

&lt;p&gt;The average cost of power where I live is about 0.11/kWh (about the national average). Using this &lt;a href=&quot;https://forums.servethehome.com/index.php?threads/xeon-26xx-v2-power-draw.22720/&quot;&gt;site&lt;/a&gt; for estimating power consumption, we can estimate my power consumption to be around 120w-130w idle. For the most part, it never reaches a very high load unless I’m doing something very compute-intensive which is rare. So let’s just call it on average 140Wh to round things out.&lt;/p&gt;

&lt;p&gt;So that means every day we consume 3.360 kWh a day. Or 100.8 kWh a month, adding about ~$11 a month to my electricity bill. Since inception that would be about $264 dollars of electricity I would’ve paid for running this system in my apartment.&lt;/p&gt;

&lt;p&gt;As a plus, It is a ‘future-proofed’ system that I don’t foresee upgrading the CPUs anytime in the future. Unless something breaks. But I would recommend a more sane spec with just a single Xeon for the newbie who wants to get into the world of homelabbing.&lt;/p&gt;

&lt;p&gt;Staying within the realm of power, the EVGA PSU was a good choice. It’s an age old rule of thumb to never skimp on the power supply. It’s important to get a good 80plus power supply to save money. Nowadays a 80plus PSUs are much cheaper and accessible. I’m unsure if its true, but supposedly using a PSU that far exceeds what your system can consume will help preserve the life of the PSU since it’ll be far less under load than less capable PSUs. It makes &lt;a href=&quot;https://www.ee.co.za/article/thermal-stress-capacitors-failure-prevention.html&quot;&gt;sense&lt;/a&gt; to me, but I’d take it with a grain of salt since the things most likely to fail in a PSU will still fail eventually no matter how much they’ve been used.&lt;/p&gt;

&lt;p&gt;Outside of that most choices for hardware are relatively easy. Once you’ve picked your CPU everything else falls in place. At first I was apprehensive toward using used hardware, but for Processors, RAM, and even HDDs you can hardly tell. The added bonus for used Xeons is there a huge over saturation of them on the market. If you okay with not having the latest and greatest, you can acquire 2-3 generations old Xeons for less than $200. I believe I paid $250 for my two Xeons.&lt;/p&gt;

&lt;p&gt;I think Supermicro is still a good choice for motherboards.  recommend a enterprise motherboard instead of the consumer/extremist grade ones that come out from time to time. For motherboards, the more bells and whistles you have the more likely it is to fail. That’s why most server motherboards are stripped down to the bare essentials.&lt;/p&gt;

&lt;p&gt;As for the HyperVisor, I used the free version of ESXi, its relatively easy to setup and maintain. The HTML5 Gui it provides is always useful (despite a few bugs here and there). I’ve also been thinking of adding a GPU for Machine learning and it seems like ESXi is still the best solution for GPU passthrough, so that’s a plus.&lt;/p&gt;

&lt;p&gt;Other options though are KVM, Proxmox, and Hyper-V. The ESXi free version has some limits on it (like no vCenter, 2 physical CPUs max, 8 vCPU/VM max), however, I feel like it isn’t a big deal for most non-commercial/enterprise users. Realistically, none of these options are a bad choice, it’s down to what you prefer.&lt;/p&gt;

&lt;p&gt;As a note, if you chose to use a dual socket motherboard and a tower instead of a rack solution, be wary of the dimensions; it was a tight squeeze to my motherboard to fit.&lt;/p&gt;

&lt;p&gt;That’s it for now.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">A few years ago, I built my first homelab server; I remember it being a bit of a daunting task and decided it might be helpful to share a few insights.</summary></entry><entry><title type="html">MagicMirror Build</title><link href="https://leevanrell.github.io/python/raspberrypi/2020/01/30/MagicMirror-build/" rel="alternate" type="text/html" title="MagicMirror Build" /><published>2020-01-30T19:10:12-06:00</published><updated>2020-01-30T19:10:12-06:00</updated><id>https://leevanrell.github.io/python/raspberrypi/2020/01/30/MagicMirror-build</id><content type="html" xml:base="https://leevanrell.github.io/python/raspberrypi/2020/01/30/MagicMirror-build/">&lt;p&gt;Here’s a little project I’ve worked on a few weeks ago. It’s a semi-intelligent magic mirror I put together. It was relatively cheap to put together since I got the monitor for free and already had a pi lying around.&lt;/p&gt;

&lt;p&gt;For the frame, I used this &lt;a href=&quot;https://amzn.to/2uCL8Rk&quot;&gt;frame&lt;/a&gt; (though when I bought it was for $100, not $150 so you may want to look elsewhere).&lt;/p&gt;

&lt;p&gt;First thing is to always test to make sure that the monitor works, saves time and heartbreak. Then remove the bezel from the monitor and be careful of any ribbon cables connected to the monitor and the bezel.
For my monitor, the display was divided into two parts physically, the power supply/input logic board, and the display itself. So to keep them together I applied a hefty amount of duck tape. Because who has power tools?&lt;/p&gt;

&lt;p&gt;This is the final product somewhat:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/magicmirror/front.jpg&quot; alt=&quot;Lowkey just a selfie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/magicmirror/back.jpg&quot; alt=&quot;Back&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can’t even tell its held entirely together by duck tape!&lt;/p&gt;

&lt;p&gt;I’ll explain the wizardry that is connected to the pi in a second.
To actually setup the magicmirror, the process is pretty automated see &lt;a href=&quot;https://github.com/sdetweil/MagicMirror_scripts&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For  customizations, I like to install &lt;a href=&quot;https://github.com/nigel-daniels/MMM-3Day-Forecast&quot;&gt;3Day forecast&lt;/a&gt;. That’s pretty much it, since, I’ve failed repeatedly to get carousel setup. I do recommend tweaking the css to correct for the screen not taking up the entire mirror’s real-estate.&lt;/p&gt;

&lt;p&gt;Now here’s where things get interesting. I’ve configured my Mirror to turn off at around 9pm and back on at 6am automatically. Here’s how:&lt;/p&gt;

&lt;p&gt;First, for hardware, you’ll need a &lt;a href=&quot;https://amzn.to/2RWC15Z&quot;&gt;photoresistor&lt;/a&gt; and a &lt;a href=&quot;https://amzn.to/37AHBRP&quot;&gt;relay&lt;/a&gt;. For tools, you’ll need a soldering iron and power of will.
I’ve wired a photoresistor to the pi that sends a low signal whenever it detects light above a certain threshold and vice versa when it doesn’t. The threshold is can be adjusted with a screw in the blue housing. I’ve used this in conjuction with a relay that has the control side wired to the pi and the operating side connected to a ribbon cable that was connected to the control board for the on/off buttons. Wiring is relatively simple, I’ve used a miniature breadboard to distribute power to the rest of the components, but isn’t totally necessary.&lt;/p&gt;

&lt;p&gt;I first figured out which pins on the control board need to be shorted in order to turn the display on &amp;amp; off.
I initially planned to solder to the board, but then realized that I can scrape the plastic off of the side of the ribbon cable connecting to the board and solder directly to that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/magicmirror/solder.jpg&quot; alt=&quot;sketchy solder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s sketchy but it works.&lt;/p&gt;

&lt;p&gt;Then I plugged the soldered wires into the operating side of the relay.
Here’s the code for actually toggling the pi on/off&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RPi.GPIO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;toggle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pull_up_down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUD_DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#GPIO is high when disp is off and GPIO low when off, inverting because that seems more logical
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;#will flip relay if told to turn on display and display is off or 
#if told to turn off the display and the display is on
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toggle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;turnon&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toggle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;turnoff&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# wait for display to turn off
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I know. Its hot garbage. But its my garbage.&lt;/p&gt;

&lt;p&gt;You can drop this script in your home directory. Make it executable with chmod.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ chmod +x script.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then run crontab to create a cron job entry.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are my entries:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0	5	*	*	*	/home/pi/script.py turnon
0	21	*	*	*	/home/pi/script.py turnoff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s cool about this solution is that its easily hackable enough that you can make a webserver to toggle it on/off aswell. I’ve made a quick example of a flask server controlling the mirror:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#/usr/bin/python3

from flask import Flask,render_template
from time import sleep
import RPi.GPIO as GPIO
import subprocess

GPIO.setmode(GPIO.BCM)
GPIO.setup(23, GPIO.OUT)
GPIO.setup(24, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

# configuration
DEBUG = True

# instantiate the app
app = Flask(__name__)
app.config.from_object(__name__)

@app.route('/', methods=['GET'])
def index():
	light_state = not GPIO.input(24) 
	if light_state == 0:
		return render_template('index.html', color=&quot;black&quot;, state=&quot;Turn on&quot;)
	else:
		return render_template('index.html', color=&quot;white&quot;, state=&quot;Turn off&quot;)

@app.route('/test', methods=[&quot;GET&quot;])
def button():
	light_state = not GPIO.input(24) 
	if light_state == 1:
		toggle()
		return render_template('index.html', color=&quot;black&quot;, state=&quot;Turn on&quot;)
	else:
		toggle()
		return render_template('index.html', color=&quot;white&quot;, state=&quot;Turn off&quot;)

def toggle():
	GPIO.output(23, GPIO.HIGH)
	sleep(0.5)
	GPIO.output(23, GPIO.LOW)
	sleep(1.5) # wait for display to turn off

if __name__ == '__main__':
	mirror_status = 0
	app.run(host='0.0.0.0')
	GPIO.cleanup()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are other things you can do like have it toggle on whenever it senses motion or lack thereof 
The rest of the code is &lt;a href=&quot;https://github.com/leevanrell/mirror-controller.git&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finis.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">Here’s a little project I’ve worked on a few weeks ago. It’s a semi-intelligent magic mirror I put together. It was relatively cheap to put together since I got the monitor for free and already had a pi lying around.</summary></entry><entry><title type="html">Turning GPT-2 into Alex Jones</title><link href="https://leevanrell.github.io/python/gpt-2/2020/01/24/Turning-GPT-2-into-Alex-Jones/" rel="alternate" type="text/html" title="Turning GPT-2 into Alex Jones" /><published>2020-01-24T20:02:32-06:00</published><updated>2020-01-24T20:02:32-06:00</updated><id>https://leevanrell.github.io/python/gpt-2/2020/01/24/Turning-GPT-2-into-Alex-Jones</id><content type="html" xml:base="https://leevanrell.github.io/python/gpt-2/2020/01/24/Turning-GPT-2-into-Alex-Jones/">&lt;p&gt;This post is me riding the coattails of the GPT-2 hype train. 
Now for those that don’t know, GPT-2 is a machine learning model that is very effective at text generation. It can maintain context over a long period of text making it more ‘human’ than previous algorithms.&lt;/p&gt;

&lt;p&gt;For those that are interested read &lt;a href=&quot;https://towardsdatascience.com/transformers-141e32e69591&quot;&gt;this&lt;/a&gt; article on transformers
and of course openai’s &lt;a href=&quot;https://openai.com/blog/better-language-models/&quot;&gt;site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the memes. To get GPT-2 talking like Alex Jones, we need text and a lot of it. Unfortunately, Alex Jones was largely purged from social media in 2019 so we’ll have to get creative. First, &lt;a href=&quot;https://en.wikiquote.org/wiki/Alex_Jones&quot;&gt;wikiquotes&lt;/a&gt; was a decent starting point. I used python w/ requests and bs4 to scrape the data (your smart, do it yourself).&lt;/p&gt;

&lt;p&gt;I’ve looked for transcripts of the Alex Jones show to no avail. But what I did find was Alex Jones’s archived &lt;a href=&quot;https://webrecorder.io/ola_norsk/twitter---alex-jones/list/twitter-profiles/b1/20180818015205/https://twitter.com/realalexjones&quot;&gt;twitter&lt;/a&gt; on webrecorder.io. Not sure what kind of wizardry those guys are running for this webapp, but I couldn’t get the html of his twitter feed for the life of me. So instead I just selected all text and wrote it to a file. Genius. There was some manual formatting I did to group them into tweets and then clean up the actual contents, but once that’s done it was somewhat useable for my purposes.&lt;/p&gt;

&lt;p&gt;Now that we’ve collected around 900 lines of the good stuff we can train a model. Here’s the code I used (stolen from some medium post, probably):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#/usr/bin/python3
import gpt_2_simple as gpt2
import os

model_name = &quot;124M&quot;
# model is saved into current directory under /models/124M/
if not os.path.isdir(os.path.join(&quot;models&quot;, model_name)):
	gpt2.download_gpt2(model_name=model_name)   

file_name = &quot;./src/alex_jones.txt&quot;

sess = gpt2.start_tf_sess()
gpt2.finetune(sess,
              file_name,
              model_name=model_name,
			  run_name='run2',
              steps=1000,
			  save_every=50,
			  print_every=5,
			  sample_every=10,
			  learning_rate = 0.0001
)

gpt2.generate_to_file(sess)


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve let this train in my homelab for a few hours while I slept, and checked back when I thought it was ready.&lt;/p&gt;

&lt;p&gt;Here are some of the results:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Organizer: Planned Parenthood Ships Guns To The US  View all other

Open book censorship represents a poison pill for the people and a soulless dollop of
propaganda for the corporate media. #FreeInfowars #1A

These people are the future. They're such zombies that you can  not only read the news,
but look at these people! They're so freaking fastidious they have time organs  in their 
knees that they can hardly walk! They have no awareness of what's going on  and go &quot;OOH 
O_O O_O&quot;O Oh my gosh! That's evil! The Alex Jones Show, &quot;HILLARY CLINTON IS A GOD DAMN 
DEMON&quot;, June 2016.

I'm like a gigantic pumpkinhead, sitting in a  park, and I'm thinking &quot;Man, this is gonna
be a really bad day.  It just so happens, is gonna be really bad. I'm thinking ABOUT 
WHATEVER  I'm thinking about today. Yeah, I'm thinking

A vocal minority of Trump hating registered voters has called off an election for fear of
repercussions from his supporters.     #Trump2020 #MAGA #1a #USA

Video: left wing extremists targeting DC political events with machetes this weekend  

The coordinated corporate attack on Infowars has exposed a deceptic by any measure, but
the silencing of the truth is even more apparent.

Now you need to find a way to stop the Chinese from harvesting our blood.

The Rise Of Alex Jones As A Fake News Crikey, Tune in M F 11am 3pm central at:   &amp;lt;&amp;lt; 
#RealNews #WednesdayWisdom #1a #ThursdayMotivation   #FreeInfowars

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are just a few of the hundreds of little gems GPT-2 spat out for us. There were a few artifact that I didn’t like from the outputs; so in the alex_jones.txt, I went back and cleaned it up a bit more. The rest of the txt files are relatively unmodified if you’d like to do the scrubbing yourself. Unlike GPT-2, all the code, output, and finetuning text I used can all be found &lt;a href=&quot;https://github.com/leevanrell/make-alex-great-again&quot;&gt;here&lt;/a&gt;. Have fun. And don’t let the globalists win.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">This post is me riding the coattails of the GPT-2 hype train. Now for those that don’t know, GPT-2 is a machine learning model that is very effective at text generation. It can maintain context over a long period of text making it more ‘human’ than previous algorithms.</summary></entry><entry><title type="html">Expanding your VMs in ESXi</title><link href="https://leevanrell.github.io/vm/esxi/2020/01/21/Expanding-your-VMs-in-ESXi/" rel="alternate" type="text/html" title="Expanding your VMs in ESXi" /><published>2020-01-21T18:10:00-06:00</published><updated>2020-01-21T18:10:00-06:00</updated><id>https://leevanrell.github.io/vm/esxi/2020/01/21/Expanding-your-VMs-in-ESXi</id><content type="html" xml:base="https://leevanrell.github.io/vm/esxi/2020/01/21/Expanding-your-VMs-in-ESXi/">&lt;p&gt;This was pesky enough that I thought it merited a small post. I recently ran out of media on my Ubuntu VM on my ESXi v6.5 homelab. And went on a small adventure trying to figure out what to slap in the terminal to get more space. So hopefully this might save someone else more time.&lt;/p&gt;

&lt;p&gt;First go to the VM whose hdd you’d like to expand and click edit settings.
Then click the Hard disk option and enter your desired hdd size (make sure the VM is shutdown for this).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/esxi_vm_hdd.png&quot; alt=&quot;ESXi Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then boot your VM and click the gui option or ssh in. Make sure GParted is installed with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo apt install gparted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Start GParted and click the /dev/sda1 partition then click the Resize/Move button. Drag the partition to the right to consume the unallocated partition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/esxi_vm_gparted.png&quot; alt=&quot;GParted Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Normally, this is all you’d have to do for a regular linux machine, however, it uses logical volumes that have to be extended as well.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo fdisk -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It should display something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/esxi_vm_cmd_1.png&quot; alt=&quot;fdisk output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second entry, ubuntu–vg-root, is the volume we’re concerned with. The name will vary from machine to machine but it should still something like name–vg-root at end. You can ignore the swap partition.&lt;/p&gt;

&lt;p&gt;Next run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo lvresize /dev/mapper/ubuntu--vg-root -L +100g 
sudo resize2fs /dev/mapper/vg0-slash

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Be sure to modify /dev/mapper/ubuntu–vg-root to match your fdisk -l output.
This extends your partition by 100g, insert however much you need. You can use 100%FREE instead of +100g and it should consume all available space; however, I couldn’t get it working for me.&lt;/p&gt;

&lt;p&gt;That’s it!&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">This was pesky enough that I thought it merited a small post. I recently ran out of media on my Ubuntu VM on my ESXi v6.5 homelab. And went on a small adventure trying to figure out what to slap in the terminal to get more space. So hopefully this might save someone else more time.</summary></entry><entry><title type="html">Capital Gains vs. Dividends vs. Critical Thought</title><link href="https://leevanrell.github.io/investing/2020/01/20/Capital-Gains-vs-Dividends-vs-Critical-Thought/" rel="alternate" type="text/html" title="Capital Gains vs. Dividends vs. Critical Thought" /><published>2020-01-20T19:50:12-06:00</published><updated>2020-01-20T19:50:12-06:00</updated><id>https://leevanrell.github.io/investing/2020/01/20/Capital-Gains-vs-Dividends-vs-Critical-Thought</id><content type="html" xml:base="https://leevanrell.github.io/investing/2020/01/20/Capital-Gains-vs-Dividends-vs-Critical-Thought/">&lt;p&gt;I’ve seen a recent trend on youtube where people post about the success of their dividend portfolio and the ‘power blue chip dividend stocks’. These videos fucking annoy me.&lt;/p&gt;

&lt;p&gt;So let’s do a really quick analysis to compare a SPY (Capital Gains) and SPYD (Dividends) portfolio. We’ll use &lt;a href=&quot;https://www.portfoliovisualizer.com/backtest-portfolio&quot;&gt;portfoliovisualizer&lt;/a&gt; to make the backtest&lt;/p&gt;

&lt;p&gt;Here you can see each portfolio allocation:
&lt;img src=&quot;/assets/img/allocation_1.png&quot; alt=&quot;Asset Allocations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here are the resulting returns:
&lt;img src=&quot;/assets/img/stock_dividend_returns_1.png&quot; alt=&quot;Asset Returns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SPY portfolio outperforms by about $900 dollars. The SPY does have a worse drawdown, yet maintains a better overall Sharpe Ratio (I have no idea what that means but there you go). The 3rd mix is interesting. I created it by picking the top 5 dividend stocks recommended by &lt;a href=&quot;https://dividendstocks.cash/dividend-screener&quot;&gt;dividendstocks.cash&lt;/a&gt;. I also watched a few dividend videos online and saw that most youtubers echoed some of the same stocks. So it seems like the stocks are atleast somewhat recommended by the dividend stock community. Given its performance, I can atleast see why. But, this backtest is limited to Jan 2016-Dec 2019 because of SPYD so let’s cut it out and see if it outperforms given a longer timeline.&lt;/p&gt;

&lt;p&gt;Here are the resulting returns:
&lt;img src=&quot;/assets/img/stock_dividend_returns_2.png&quot; alt=&quot;Asset Returns&quot; /&gt;
&lt;img src=&quot;/assets/img/stock_dividend_returns_graph.png&quot; alt=&quot;Asset Returns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A much better final balance. If you go back farther and farther back the performance only gets better for the dividend portfolio; however, I’m lazy and you get the point.&lt;/p&gt;

&lt;p&gt;Though realistically this is a terrible backtest due to bias because I chose these stocks based on previous performance. So, let’s strike that out for now. Or if you want I can throw in an AMZN, GOOGL, FB portfolio together and see how they go toe to toe. Looks like I need a better point.&lt;/p&gt;

&lt;p&gt;So, what else is there? Taxes.&lt;/p&gt;

&lt;p&gt;Taxes get complicated very fast so let’s keep it simple. There are two different types of dividends in terms of taxes. Qualified dividends, basically a dividend paid by a US company, and Ordinary dividends. Ordinary dividends are taxed as ordinary income whereas Qualified dividend receives reduced tax rates depending on your reported income. Since Qualified dividends are better, let’s just focus on them for now.&lt;/p&gt;

&lt;p&gt;For the 10% and 12% tax brackets, you pay 0% in taxes for Qualified dividends.
For the 22%, 24%, 32%, and 35%, you pay a 15% tax rate.
For the 35% and 37% tax brackets, you make too much to care. If you noticed, that the 35% bracket appears twice, its because marriage complicates things.&lt;/p&gt;

&lt;p&gt;Now let’s look at Stocks or ‘Capital gains’ as the kids call them. Again, there are two types, long term, held for longer than a year, and short term, held for less than a year.&lt;/p&gt;

&lt;p&gt;For short term capital gains, it is taxed equal to your marginal tax rate.
For long term capital gains, the tax rates vary from 0%-20% based on your tax bracket&lt;/p&gt;

&lt;p&gt;For the 10% and 12% tax brackets, you pay 0 in taxes much like Qualified dividends.
For the 22%, 24%, 32%, and 35%, you pay a 15% tax rate.
For the 35% and 37% tax brackets, you make too much to care (okay its 20%).&lt;/p&gt;

&lt;p&gt;So, there is no benefit in terms of taxes to dividends or stocks as long as its a US company or if it’s held for longer than a year.&lt;/p&gt;

&lt;p&gt;So why are there a bunch of thots in my youtube feed, using these points like there’s some sort of magical stock market loophole out there? Guess they assume everyone’s too fucking stupid to do their homework.&lt;/p&gt;

&lt;p&gt;Realistically, anyone who can take advantage of the tax-free status of a dividend or stock should invest their money in an IRA and in a passively managed index with ultra-low fees.&lt;/p&gt;

&lt;p&gt;You won’t bring yourself out of poverty and into obscene wealth overnight. Dividends can’t magic out enough of an income for you to live off of easily. Stocks aren’t a cure-all. Listen to reason. Invest in you. Invest in the future. There are kernels of truth in their lies, but just be wary. Call me a hater, but just fuck off with the bullshit&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">I’ve seen a recent trend on youtube where people post about the success of their dividend portfolio and the ‘power blue chip dividend stocks’. These videos fucking annoy me.</summary></entry><entry><title type="html">Setting up CCTW with MotionEyeOS</title><link href="https://leevanrell.github.io/raspberrypi/motioneyeos/2020/01/18/Setting-up-CCTV-with-MotionEyeOS/" rel="alternate" type="text/html" title="Setting up CCTW with MotionEyeOS " /><published>2020-01-18T19:22:12-06:00</published><updated>2020-01-18T19:22:12-06:00</updated><id>https://leevanrell.github.io/raspberrypi/motioneyeos/2020/01/18/Setting-up-CCTV-with-MotionEyeOS</id><content type="html" xml:base="https://leevanrell.github.io/raspberrypi/motioneyeos/2020/01/18/Setting-up-CCTV-with-MotionEyeOS/">&lt;p&gt;Recently, my paranoia of home invasion has reached a climax; So in addition to setting up a MotionEye cam pointed at my door, I’ve also decided I need a CCTV-like capability to monitor my door at all times while I’m at my Desk.&lt;/p&gt;

&lt;p&gt;Assuming you already have MotionEye set up on a pi (if you don’t you can look at my previous post &lt;a href=&quot;/raspberrypi/motioneyeos/2020/01/15/MotionEyeOS-setup-guide/&quot;&gt;here&lt;/a&gt;), you’ll only need to setup a Pi 3 with the latest rasbian image. I used a Pi 3 and the &lt;a href=&quot;https://amzn.to/2R7u5j6&quot;&gt;official 7-in screen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have a raspberry pi 3 running and on a network go ahead and update it with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo apt update -y &amp;amp;&amp;amp; sudo apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then install unclutter with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ sudo apt install unclutter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is to hide the mouse-cursor, recommended, but not required&lt;/p&gt;

&lt;p&gt;Now onto the bread and butter. Make sure that you have the streaming functionality enabled, otherwise it won’t work. To display the MotionEyeOS stream, we’ll make chromium load on startup and open to the MotionEye’s streaming page. Write the following to /home/pi/.config/lxsession/LXDE-pi/autostart.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@xset s off
@xset -dpms
@xset s noblank
@chromium-browser --kiosk http://{MOTIONEYE'S IP}}:8081
@unclutter -idle 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you need to rotate the display write&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lcd_display=2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;into /boot/config.txt, 2 rotates it by 180 degrees.&lt;/p&gt;

&lt;p&gt;And that’s it! Reboot to ensure everything is working.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cctv.jpg&quot; alt=&quot;MotionEye Config&quot; /&gt;&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">Recently, my paranoia of home invasion has reached a climax; So in addition to setting up a MotionEye cam pointed at my door, I’ve also decided I need a CCTV-like capability to monitor my door at all times while I’m at my Desk.</summary></entry><entry><title type="html">Setting a MotionEyeOS Webcam</title><link href="https://leevanrell.github.io/raspberrypi/motioneyeos/2020/01/15/MotionEyeOS-setup-guide/" rel="alternate" type="text/html" title="Setting a MotionEyeOS Webcam" /><published>2020-01-15T20:12:12-06:00</published><updated>2020-01-15T20:12:12-06:00</updated><id>https://leevanrell.github.io/raspberrypi/motioneyeos/2020/01/15/MotionEyeOS-setup-guide</id><content type="html" xml:base="https://leevanrell.github.io/raspberrypi/motioneyeos/2020/01/15/MotionEyeOS-setup-guide/">&lt;p&gt;This guide is for anyone who wants to setup a MotionEye cam. You’ll need a raspberry pi (I recommend a pi 3b or better, but you can get away with a 2), a ~gb sd card, raspberry pi camera and ribbon cable, and a 5v power supply.&lt;/p&gt;

&lt;p&gt;For those who want a 3d printable case and camera holder, I recommend &lt;a href=&quot;https://www.thingiverse.com/thing:4099543&quot;&gt;this&lt;/a&gt; case (because I designed it and use it myself). Otherwise there plenty of commercial &lt;a href=&quot;https://amzn.to/2NFs7V3&quot;&gt;options&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides that, the setup for MotionEyeOS is relatively easy. Although there are some tweaks that I find important to have a more functional surveillance system. We’ll talk about that later.&lt;/p&gt;

&lt;p&gt;First, go motioneye’s releases &lt;a href=&quot;https://github.com/ccrisan/motioneyeos/releases&quot;&gt;page&lt;/a&gt;. Download the corresponding images for your board. Once, downloaded plug in your preferred image flashing utility, I prefer &lt;a href=&quot;https://www.balena.io/etcher&quot;&gt;balenaEtcher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to use wifi with the pi, you can drop wpa_supplicant.conf in the root directory of the sd card and paste this into the file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    country=US
    update_config=1
    ctrl_interface=/var/run/wpa_supplicant
    
    network={
        scan_ssid=1
        ssid=&quot;MyWiFiSSID&quot;
        psk=&quot;S3cr3tp@$$w0rc|&quot;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Be sure to replace the SSID and PSK with your SSID and password. If you have any questions or frustrations fuck off to the &lt;a href=&quot;https://github.com/ccrisan/motioneyeos/wiki/Wifi-Preconfiguration&quot;&gt;git&lt;/a&gt;. Once this is finished, we’re now done with the sd card and you can plug it into the pi.&lt;/p&gt;

&lt;p&gt;Now for the camera. For the camera connector, usually the side with the metal contacts should face toward the camera. Lift the slide clamp of the connector to make it easier to slide the ribbon cable in. Slide in the ribbon cable. Now pull it out and put it back in. Repeat until climax. Once finished slide it in again and push the clamp back. Don’t use too much force. They’re gentle creatures. Now for the pi connector. The process is pretty much the same. The connector you want is the one closest to the USB/Ethernet ports. Don’t put it in the wrong hole. The metal contacts should face towards the HDMI port/away from the USB/Ethernet ports.&lt;/p&gt;

&lt;p&gt;Once this is complete, you’re set to turn on the pi. The boot process takes some time to complete. You can use a network tool to monitor once the pi has come online like angryIPscanner (Windows/normie) or nmap (linux/windows).&lt;/p&gt;

&lt;p&gt;The login is admin and the password should be left blank. If you’re not being prompted for an admin login the first time, click the person icon in the top left corner.&lt;/p&gt;

&lt;p&gt;The First thing you should do now is change the password to something a little more secure (try password123).&lt;/p&gt;

&lt;p&gt;For the settings, it’s important to note that this is all running on something that consumes less than 4 watts under load and has a full linux kernel and network stack. So it’s not going to be able to stream and capture 1920x1080@60fps easily (I’m sure this is gonna age well). Although maybe the newer pi’s can handle it better, IDGAF.&lt;/p&gt;

&lt;p&gt;Something I like to do is enable push notifications via &lt;a href=&quot;https://pushover.net/&quot;&gt;Pushover&lt;/a&gt;. First, enable and configure Motion Detection like so &lt;img src=&quot;/assets/img/motioney_config.png&quot; alt=&quot;MotionEye Config&quot; /&gt;.
You can set the mask to only trigger off of an area of interest like a door/entryway/shower/etc. The red-highlighted area is the area that is ignored by the camera. Also note that these settings might not work for everyone and aren’t set in stone. This just works for me.&lt;/p&gt;

&lt;p&gt;Now that motion detection is enabled go one tab down to ‘Motion Notifications’. Enable Run a Command and enter as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python /root/notify.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, enable ssh server in the services tab.
Hit the annoying orange apply tab. The pi should reboot. Once the pi is back up, SSH into with a ssh client (if you’ve made it this far you probably know what your doing and don’t need help getting one). Since the creators are complete Nazis, the entire fs is read only so we’ll need to run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount -o remount,rw /
mount -o remount,rw /boot

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next thing is to open /root/notify.py&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ nano /root/notify.py #they include nano tho?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write the following python script:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import httplib, urllib, urllib2

req = urllib2.Request('http://icanhazip.com', data=None) 
response = urllib2.urlopen(req, timeout=5)
response = response.read().strip('\n')
port = 80

conn = httplib.HTTPSConnection(&quot;api.pushover.net:443&quot;)
conn.request(&quot;POST&quot;, &quot;/1/messages.json&quot;,
urllib.urlencode({
    &quot;token&quot;: &quot;APP_TOKEN&quot;,                       # Insert app token here
    &quot;user&quot;: &quot;USER_TOKEN&quot;,                       # Insert user token here
    &quot;html&quot;: &quot;1&quot;,                                # 1 for HTML, 0 to disable
    &quot;title&quot;: &quot;Motion Detected!&quot;,                # Title of the message
    &quot;message&quot;: &quot;&amp;lt;b&amp;gt;Front Door&amp;lt;/b&amp;gt; camera!&quot;,     # Content of the message - include HTML if required
    &quot;url&quot;: &quot;http://&quot;+response+&quot;:&quot;+str(port),         # Link to be included in message
    &quot;url_title&quot;: &quot;View live stream&quot;,            # Text for the link
    &quot;sound&quot;: &quot;siren&quot;,                           # Define the sound played on the receiving device
}), { &quot;Content-type&quot;: &quot;application/x-www-form-urlencoded&quot; })
conn.getresponse()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To generate a user and app token head over to Pushover and they’ll get you set up. The service costs a few bucks for an account and provides a 7,500 messages/month. If your too cheap to pay that dunno why you wasted $50 on a shitty webcam. Once the tokens are added Ctrl^O and Ctrl^x and exit the ssh session. Now, download Pushover’s app and you should be set to receive messages. Now try and run the following command in the ssh shell.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ python /root/notify.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With any luck you should receive a push notification.&lt;/p&gt;

&lt;p&gt;Other than that Motioneye also has Cloud storage option if you trust your data with Google/DropBox. Look at the File Storage tab if that interests you.&lt;/p&gt;

&lt;p&gt;To keep your pi from dying a slow death, I recommend lowering the Movie/Still Quality to ~60-75%. I also have my resolution set to 720p@15fps and am mildly satisfied with it.
That’s it. You survived. Adorable.ssubl&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">This guide is for anyone who wants to setup a MotionEye cam. You’ll need a raspberry pi (I recommend a pi 3b or better, but you can get away with a 2), a ~gb sd card, raspberry pi camera and ribbon cable, and a 5v power supply.</summary></entry><entry><title type="html">What I did in 2019</title><link href="https://leevanrell.github.io/me/2020/01/14/What-I-did-in-2019/" rel="alternate" type="text/html" title="What I did in 2019" /><published>2020-01-14T20:00:00-06:00</published><updated>2020-01-14T20:00:00-06:00</updated><id>https://leevanrell.github.io/me/2020/01/14/What-I-did-in-2019</id><content type="html" xml:base="https://leevanrell.github.io/me/2020/01/14/What-I-did-in-2019/">&lt;p&gt;I know this is probably coming a little late compared to some. But thats just who I am.&lt;/p&gt;

&lt;p&gt;I just graduated in December of 2018. So the first quarter of 2018 was filled with applications and anxiety. Eventually, I got a job as a Software Engineer. However, through the past 8 months, I’ve learned that title is much more of a formality than anything else. I’ve become a sme in things I didn’t know existed 12 months ago and mildly knowledgeable of even more. I regularly get to wear the hat of a Software Engineer, Red teamer, Blue Teamer, RF Engineer, and Systems Engineer all in the same day.&lt;/p&gt;

&lt;p&gt;I attended a few conferences, Showmecon and GRCon to name a few. Unfortunately time slipped me by and I couldn’t attend BSides HSV.At GRCon, I was floored by the massive knowledge base I was surrounded by. Everyone there was a contributor to GNURadio itself or a wildly popular OOT like &lt;a href=&quot;https://github.com/daniestevez/gr-satellites&quot;&gt;gr-satellites&lt;/a&gt;. If you aren’t familiar, this project has software to capture and demodulate the signal of several dozen active satellites. Its an amazing.
One talk about &lt;a href=&quot;https://www.gnuradio.org/grcon/grcon19/presentations/determining_optimized_radio_settings_for_specific_waveforms/Determining%20Optimized%20Radio%20settings%20for%20specific%20waveforms_GRCon2019.pdf&quot;&gt;ads-b&lt;/a&gt; inspired me to write a ads-b transmitter as an entry to the world of SDR. And I was successful. I was suprised at how easy it was (humble brag). However, I’m afraid of the reprocussions for releasing the code, so I’m afraid it will stay buried.&lt;/p&gt;

&lt;p&gt;Besides the world of conferences and sdrs. I’ve develled into 3d printing and design. I’m still quite a novice, but I’ve made a few designed that I hope to post to thingiverse soon. They include a Raspberrypi case and camera holder, a showmecon badge, and a case for a stock ticker like 64x8 led matrix.&lt;/p&gt;

&lt;p&gt;I’ve started studying for Security+, CISSP, and CEH. This is all required by my work and has triggered horrible war-like flashbacks to studying in college.&lt;/p&gt;

&lt;p&gt;I started toying with C/CUDA because parrallelization get me hot and heavy. However, I haven’t even successfully compiled any CUDA code yet, but a boy can dream.&lt;/p&gt;

&lt;p&gt;I helped make my first &lt;a href=&quot;fuckcliff.me&quot;&gt;site&lt;/a&gt; (besides this one). I toyed with a new JS framework called Svelte/Sapper. Unfortanetly Web dev scares me so I’ll save it for another time.&lt;/p&gt;

&lt;p&gt;I got to visit my friends in DC around the Holidays and have fell in love with the city. I hope to live there one day. Plus I miss my friends, so thats a plus.&lt;/p&gt;

&lt;p&gt;I’m sure there are a great deal of things I’m forgetting but this is what I remembered so this must be what’s important. Atleast to me.&lt;/p&gt;</content><author><name>lee vanrell</name></author><summary type="html">I know this is probably coming a little late compared to some. But thats just who I am.</summary></entry></feed>